/*! jQuery Pagination Plugin - v1.2.3 - 27/4/2015 | (c) 2015 Mricle , Licensed MIT , http://mricle.com/JqueryPagination */
!function (n) { "use strict"; var t = { pageClicked: "pageClicked", jumpClicked: "jumpClicked", pageSizeChanged: "pageSizeChanged" }, i = function (i, u) { var e, f; this.$element = n(i); this.$page = n('<ul class="m-pagination-page"><\/ul>'); this.$size = n('<div class="m-pagination-size"><\/div>'); this.$jump = n('<div class="m-pagination-jump"><\/div>'); this.$info = n('<div class="m-pagination-info"><\/div>'); this.options = n.extend(!0, {}, { pageSize: 10, pageBtnCount: 11, showFirstLastBtn: !0, firstBtnText: null, lastBtnText: null, prevBtnText: "&laquo;", nextBtnText: "&raquo;", loadFirstPage: !0, remote: { url: null, params: null, callback: null, pageIndexName: "pageIndex", pageSizeName: "pageSize", totalName: "total" }, showInfo: !1, infoFormat: "{start} ~ {end} of {total} entires", showJump: !1, jumpBtnText: "Go", showPageSizes: !1, pageSizeItems: null, debug: !1 }, n.fn.page.defaults, u); this.total = this.options.total || 0; this.options.pageSizeItems = this.options.pageSizeItems || [5, 10, 15, 20]; this.currentPageIndex = 0; this.currentPageSize = this.options.pageSize; this.pageCount = this.getPageCount(this.total, this.currentPageSize); e = function (t) { for (var o, i = t, e = n('<select data-page-btn="size"><\/select>'), u = 0; u < i.options.pageSizeItems.length; u++) e.append('<option value="' + i.options.pageSizeItems[u] + '">' + i.options.pageSizeItems[u] + "<\/option>"); e.val(i.currentPageSize); i.$size.append(e); o = '<div class="m-pagination-group"><input type="text"><button data-page-btn="jump" type="button">' + i.options.jumpBtnText + "<\/button><\/div>"; i.$jump.append(o); i.$jump.find("input").change(function () { var t = n(this); r(t.val(), i.pageCount) || t.val(null) }); i.$element.append(i.$page); i.options.showPageSizes && i.$element.append(i.$size); i.options.showJump && i.$element.append(i.$jump); i.options.showInfo && i.$element.append(i.$info); i._remoteOrRedner(0, i.options.loadFirstPage); i.$element.on("click", { page: i }, function (n) { f(n) }).on("change", { page: i }, function (n) { f(n) }) }; f = function (i) { var u = i.data.page, e = n(i.target), s, f, o; i.type !== "click" || e.data("pageIndex") === undefined || e.parent().hasClass("active") ? i.type === "click" && e.data("pageBtn") === "jump" ? (s = u.$jump.find("input").val(), r(s, u.pageCount) && (f = s - 1, u.$element.trigger(t.jumpClicked, f), u.debug("event[ jumpClicked ] : pageIndex = " + f), u._remoteOrRedner(f)), u.$jump.find("input").val(null)) : i.type === "change" && e.data("pageBtn") === "size" && (o = u.$size.find("select").val(), u.currentPageSize = o, u.$element.trigger(t.pageSizeChanged, o), u.debug("event[ pageSizeChanged ] : pageSize = " + o), u._remoteOrRedner(0)) : (f = n(i.target).data("pageIndex"), u.$element.trigger(t.pageClicked, f), u.debug("event[ pageClicked ] : pageIndex = " + f), u._remoteOrRedner(f)) }; typeof this.options.total == "undefined" && this.options.remote.url === null ? console && console.error("[init error] : the options must have the parameter of 'remote.url' or 'total'.") : typeof this.options.total != "undefined" || this.options.loadFirstPage ? e(this) : console && console.error("[init error] : if you don't remote the first page. you must set the options or 'total'.") }, r; i.prototype = { _remoteOrRedner: function (n, t) { this.options.remote.url ? t == !1 ? this.renderPagination(n) : this.remote(n) : this.renderPagination(n) }, remote: function (t, i) { var r = this, u, f; typeof t == "object" && (i = t, t = null); typeof t != "number" && (t = r.currentPageIndex); i && (this.options.remote.params = n.extend({}, this.options.remote.params, i)); u = {}; u[this.options.remote.pageIndexName] = t; u[this.options.remote.pageSizeName] = this.currentPageSize; f = n.extend({}, this.options.remote.params, u); n.ajax({ url: this.options.remote.url, dataType: "json", data: f, contentType: "application/Json", async: !1, success: function (n) { r.debug("ajax resopnse : params = " + JSON.stringify(f), n); var u = 0, i = r.options.remote.totalName.split("."); switch (i.length) { case 1: u = n[i[0]]; break; case 2: u = n[i[0]][i[1]]; break; case 3: u = n[i[0]][i[1]][i[2]]; break; case 4: u = n[i[0]][i[1]][i[2]][i[3]]; break; case 5: u = n[i[0]][i[1]][i[2]][i[3]][i[4]] } u == undefined ? console && console.error("the response of totalName :  '" + r.options.remote.totalName + "'  not found") : (r.total = u, typeof r.options.remote.callback == "function" && r.options.remote.callback(n, t), r.renderPagination(t)) } }) }, renderPagination: function (n) { this.currentPageIndex = n; var t = this._render(n); this.$page.empty(); this.pageCount != 1 && this.$page.append(t); this.$info.text(this.renderInfo()) }, _render: function (n) { var r, i, t, o, s; if (n = n == undefined ? 1 : parseInt(n) + 1, typeof this.total == "undefined" && console && console.error("total is undefined"), r = this.getPageCount(this.total, this.currentPageSize), this.pageCount = r, i = this.options.pageBtnCount, t = [], r <= i) t = this.renderPage(1, r, n); else { var f = this.renderPerPage(this.options.firstBtnText || 1, 0), e = this.renderPerPage(this.options.lastBtnText || r, r - 1), u = (i - 3) / 2; this.options.showFirstLastBtn || (u = u - 1); o = (i + 1) / 2; s = r - (i - 1) / 2; n <= o ? this.options.showFirstLastBtn ? (t = this.renderPage(1, i - 1, n), t[t.length - 1].find("a").html(this.options.nextBtnText), t.push(e)) : (t = this.renderPage(1, i, n), t[t.length - 1].find("a").html(this.options.nextBtnText)) : n >= s ? this.options.showFirstLastBtn ? (t = this.renderPage(r - i + 2, i - 1, n), t[0].find("a").html(this.options.prevBtnText), t.unshift(f)) : (t = this.renderPage(r - i + 1, i, n), t[0].find("a").html(this.options.prevBtnText)) : this.options.showFirstLastBtn ? (t = this.renderPage(n - u, i - 2, n), t[0].find("a").html(this.options.prevBtnText), t[t.length - 1].find("a").html(this.options.nextBtnText), t.unshift(f), t.push(e)) : (t = this.renderPage(n - u - 2, i, n), t[0].find("a").html(this.options.prevBtnText), t[t.length - 1].find("a").html(this.options.nextBtnText)) } return t }, renderInfo: function () { var i = this.currentPageIndex * this.currentPageSize + 1, n = (this.currentPageIndex + 1) * this.currentPageSize, t; return n = n >= this.total ? this.total : n, t = this.options.infoFormat, t.replace("{start}", i).replace("{end}", n).replace("{total}", this.total) }, renderPerPage: function (t, i) { return n("<li><a data-page-index='" + i + "'>" + t + "<\/a><\/li>") }, renderPage: function (n, t, i) { for (var r, u = [], f = 0; f < t; f++) r = this.renderPerPage(n, n - 1), n == i && r.addClass("active"), u.push(r), n++; return u }, getPageCount: function (n, t) { var n = parseInt(n), i = (n / t).toString(), r = i.indexOf("."); return r == -1 ? parseInt(i) : parseInt(i.substring(0, r)) + 1 }, destroy: function () { this.$element.data("page", null).empty() }, debug: function (n, t) { this.options.debug && console && (n && console.info(n), t && console.info(t)) } }; r = function (n, t) { var i = /^\+?[1-9][0-9]*$/.test(n); return i && (i = n <= t), i }; n.fn.page = function (t) { var r = arguments; return this.each(function () { var f = n(this), u = f.data("page"), e, o; u || typeof t != "object" && typeof t != "undefined" ? u && typeof t == "string" ? u[t].apply(u, Array.prototype.slice.call(r, 1)) : f.data("page", u = new i(this)) : (e = typeof t == "object" && t, o = f.data(), e = n.extend(e, o), f.data("page", u = new i(this, e))) }) } }(window.jQuery)